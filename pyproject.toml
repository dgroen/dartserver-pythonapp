[project]
name = "dartserver-pythonapp"
version = "1.0.0"
description = "Darts Game Web Application with RabbitMQ integration"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Dartserver Team"}
]
keywords = ["darts", "game", "rabbitmq", "flask", "socketio"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "flask>=3.0.0,<4.0.0",
    "flask-socketio>=5.3.5,<6.0.0",
    "flask-cors>=4.0.0,<5.0.0",
    "pika>=1.3.2,<2.0.0",
    "python-socketio>=5.10.0,<6.0.0",
    "eventlet>=0.33.3,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "pytest-flask>=1.3.0",
    "pytest-timeout>=2.2.0",
    "coverage[toml]>=7.3.0",
]
lint = [
    "pre-commit>=3.0.0", 
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "flake8>=6.1.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.21.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
test = [
    "tox>=4.11.0",
    "tox-uv>=1.0.0",
]
all = [
    "dartserver-pythonapp[dev,lint,test]",
]

[project.scripts]
dartserver = "app:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["games"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/__pycache__/*"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # bandit
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "S101",    # Use of assert detected
    "S104",    # Possible binding to all interfaces
    "S105",    # Possible hardcoded password
    "S106",    # Possible hardcoded password
    "S311",    # Standard pseudo-random generators (OK for non-crypto use)
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLW0603", # Using global statement (needed for rabbitmq_consumer)
    "PLW1508", # Invalid type for environment variable default (false positive)
    "TRY003",  # Avoid specifying long messages outside exception class
    "EM101",   # Exception must not use a string literal
    "EM102",   # Exception must not use an f-string literal
    "G004",    # Logging statement uses f-string
    "T201",    # print found
    "C901",    # Function is too complex
    "PLC0415", # Import should be at top-level (OK for optional imports)
    "TRY300",  # Consider moving statement to else block
    "PTH110",  # os.path.exists should be Path.exists (not critical)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG001", "ARG002"]
"examples/*" = ["T201", "S105", "S106", "S113"]
"test_*.py" = ["S101", "PLR2004", "ARG001", "ARG002", "S113"]
"verify_installation.py" = ["T201", "S105", "S106"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
exclude = [
    "build/",
    "dist/",
    ".tox/",
    ".venv/",
    "venv/",
    "__pycache__/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["union-attr"]

[tool.pylint.main]
py-version = "3.10"
jobs = 0
limit-inference-results = 100
persistent = true
suggestion-mode = true
unsafe-load-any-extension = false

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "W0511",  # fixme
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 6
max-statements = 60
min-public-methods = 1

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "rabbitmq: Tests requiring RabbitMQ",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
timeout = 300

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/.tox/*",
    "*/examples/*",
    "verify_installation.py",
    "test_rabbitmq.py",
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "examples", ".tox", ".venv"]
exclude = ["test_rabbitmq.py", "verify_installation.py"]
skips = ["B101", "B104", "B311", "B601"]