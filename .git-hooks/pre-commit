#!/usr/bin/env bash
# Custom pre-commit hook with fail-first, fix-second behavior
# This hook will fail on the first attempt and auto-fix on the second attempt

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# State file to track attempts
STATE_FILE=".git/pre-commit-state"

# Function to print colored messages
print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${YELLOW}ℹ $1${NC}"
}

# Check if this is the first or second attempt
if [ -f "$STATE_FILE" ]; then
    ATTEMPT=$(cat "$STATE_FILE")
    ATTEMPT=$((ATTEMPT + 1))
else
    ATTEMPT=1
fi

echo "$ATTEMPT" > "$STATE_FILE"

echo ""
echo "=========================================="
echo "  Pre-commit Hook - Attempt #$ATTEMPT"
echo "=========================================="
echo ""

# Get list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_info "No Python files staged for commit"
    rm -f "$STATE_FILE"
    exit 0
fi

echo "Checking ${#STAGED_FILES[@]} Python file(s)..."
echo ""

# First attempt: Check only, fail if issues found
if [ "$ATTEMPT" -eq 1 ]; then
    print_warning "FIRST ATTEMPT: Checking code quality (will fail if issues found)"
    echo ""
    
    FAILED=0
    
    # Run Ruff check
    echo "Running Ruff linter..."
    if ! ruff check $STAGED_FILES; then
        print_error "Ruff found issues"
        FAILED=1
    else
        print_success "Ruff check passed"
    fi
    echo ""
    
    # Run Black check
    echo "Running Black formatter check..."
    if ! black --check --diff $STAGED_FILES; then
        print_error "Black found formatting issues"
        FAILED=1
    else
        print_success "Black check passed"
    fi
    echo ""
    
    # Run isort check
    echo "Running isort import sorting check..."
    if ! isort --check-only --diff $STAGED_FILES; then
        print_error "isort found import sorting issues"
        FAILED=1
    else
        print_success "isort check passed"
    fi
    echo ""
    
    # Run Flake8
    echo "Running Flake8..."
    if ! flake8 $STAGED_FILES --max-line-length=100 --extend-ignore=E203,E266,E501,W503; then
        print_error "Flake8 found issues"
        FAILED=1
    else
        print_success "Flake8 check passed"
    fi
    echo ""
    
    if [ $FAILED -eq 1 ]; then
        echo ""
        echo "=========================================="
        print_error "COMMIT BLOCKED: Code quality issues found!"
        echo "=========================================="
        echo ""
        print_warning "Try committing again to auto-fix these issues"
        echo ""
        exit 1
    else
        print_success "All checks passed!"
        rm -f "$STATE_FILE"
        exit 0
    fi

# Second attempt: Auto-fix issues
elif [ "$ATTEMPT" -eq 2 ]; then
    print_warning "SECOND ATTEMPT: Auto-fixing code quality issues"
    echo ""
    
    # Run Ruff with auto-fix
    echo "Running Ruff with auto-fix..."
    ruff check --fix $STAGED_FILES || true
    print_success "Ruff auto-fix completed"
    echo ""
    
    # Run Black to format
    echo "Running Black formatter..."
    black $STAGED_FILES
    print_success "Black formatting completed"
    echo ""
    
    # Run isort to sort imports
    echo "Running isort..."
    isort $STAGED_FILES
    print_success "isort completed"
    echo ""
    
    # Re-stage the fixed files
    echo "Re-staging fixed files..."
    git add $STAGED_FILES
    print_success "Files re-staged"
    echo ""
    
    # Run final checks
    echo "Running final validation..."
    FINAL_FAILED=0
    
    if ! ruff check $STAGED_FILES; then
        print_error "Ruff still reports issues after auto-fix"
        FINAL_FAILED=1
    fi
    
    if ! black --check $STAGED_FILES; then
        print_error "Black still reports issues after auto-fix"
        FINAL_FAILED=1
    fi
    
    if ! isort --check-only $STAGED_FILES; then
        print_error "isort still reports issues after auto-fix"
        FINAL_FAILED=1
    fi
    
    if [ $FINAL_FAILED -eq 1 ]; then
        echo ""
        echo "=========================================="
        print_error "COMMIT BLOCKED: Some issues could not be auto-fixed"
        echo "=========================================="
        echo ""
        print_warning "Please review and fix the remaining issues manually"
        rm -f "$STATE_FILE"
        exit 1
    fi
    
    echo ""
    echo "=========================================="
    print_success "All issues fixed! Commit proceeding..."
    echo "=========================================="
    echo ""
    rm -f "$STATE_FILE"
    exit 0

# Third+ attempt: Should not happen, but reset state
else
    print_warning "Multiple attempts detected, resetting state"
    rm -f "$STATE_FILE"
    exit 1
fi