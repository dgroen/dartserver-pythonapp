[tox]
min_version = 4.0
env_list = 
    py{310,311,312}
    lint
    type
    security
    coverage-report
isolated_build = true
skip_missing_interpreters = true

[testenv]
description = Run unit and integration tests
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-mock>=3.12.0
    pytest-asyncio>=0.21.0
    pytest-flask>=1.3.0
    pytest-timeout>=2.2.0
    coverage[toml]>=7.3.0
commands =
    pytest {posargs:tests/} \
        --cov={envsitepackagesdir}/dartserver_pythonapp \
        --cov=app \
        --cov=game_manager \
        --cov=rabbitmq_consumer \
        --cov=games \
        --cov-report=term-missing \
        --cov-report=html:htmlcov-{envname} \
        --cov-report=xml:coverage-{envname}.xml \
        --cov-branch \
        --junit-xml=junit-{envname}.xml \
        -v

[testenv:py310]
description = Run tests with Python 3.10

[testenv:py311]
description = Run tests with Python 3.11

[testenv:py312]
description = Run tests with Python 3.12

[testenv:lint]
description = Run all linting checks
skip_install = false
deps =
    ruff>=0.1.0
    black>=23.0.0
    isort>=5.12.0
    flake8>=6.1.0
    flake8-docstrings>=1.7.0
    flake8-bugbear>=23.0.0
    flake8-comprehensions>=3.14.0
    flake8-simplify>=0.21.0
commands =
    ruff check . {posargs}
    black --check --diff . {posargs}
    isort --check-only --diff . {posargs}
    flake8 . {posargs}

[testenv:lint-fix]
description = Run linting checks and auto-fix issues
skip_install = false
deps =
    ruff>=0.1.0
    black>=23.0.0
    isort>=5.12.0
commands =
    ruff check --fix . {posargs}
    black . {posargs}
    isort . {posargs}

[testenv:type]
description = Run type checking with mypy
skip_install = false
deps =
    mypy>=1.7.0
    types-flask
    types-requests
commands =
    mypy . {posargs}

[testenv:security]
description = Run security checks
skip_install = false
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r . -c pyproject.toml {posargs}
    safety check --json

[testenv:pylint]
description = Run pylint checks
skip_install = false
deps =
    pylint>=3.0.0
commands =
    pylint app.py game_manager.py rabbitmq_consumer.py games/ {posargs}

[testenv:coverage-report]
description = Generate combined coverage report
skip_install = true
deps =
    coverage[toml]>=7.3.0
commands =
    coverage combine
    coverage report --fail-under=80
    coverage html -d htmlcov
    coverage xml -o coverage.xml
    coverage json -o coverage.json
depends = py{310,311,312}

[testenv:docs]
description = Build documentation
skip_install = false
deps =
    sphinx>=7.0.0
    sphinx-rtd-theme>=1.3.0
commands =
    sphinx-build -W -b html docs docs/_build/html

[testenv:clean]
description = Clean up build artifacts and cache
skip_install = true
deps =
allowlist_externals = 
    rm
    find
commands =
    rm -rf .tox
    rm -rf build
    rm -rf dist
    rm -rf *.egg-info
    rm -rf htmlcov*
    rm -rf .coverage*
    rm -rf coverage*.xml
    rm -rf junit*.xml
    rm -rf .pytest_cache
    rm -rf .mypy_cache
    rm -rf .ruff_cache
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[testenv:dev]
description = Development environment with all tools
skip_install = false
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:security]deps}
    ipython
    ipdb
commands =
    python -c "print('Development environment ready!')"

[flake8]
max-line-length = 100
extend-ignore = E203, E266, E501, W503
exclude = 
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    build,
    dist,
    *.egg-info,
    .eggs,
    migrations
max-complexity = 10
docstring-convention = google
per-file-ignores =
    tests/*:D100,D101,D102,D103,D104
    examples/*:D100,D101,D102,D103,D104,T201